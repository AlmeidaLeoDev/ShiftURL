# Workflow name shown in GitHub Actions
name: CI - Backend ASP.NET Core

# Trigger the workflow on push or pull request to develop or feature branches
on:
  push:
    branches: [ "feature/*", "develop", "main" ]  # CI runs for feature, develop and main
  pull_request:
    branches: [ "develop", "main" ]  # CI runs on PRs for develop and main
  
jobs:
  ci-backend:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    permissions: # Define the scopes of the GITHUB_TOKEN for this job
      contents: read # Allow reading repository code for analysis
      security-events: write # Required to upload security scanning results (CodeQL)
      packages: write # Grants permission to publish packages (e.g., GitHub Packages, containers)

    steps:
      # Download repo code to the runner
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup and install .NET environment
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      # Cache NuGet packages
      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      # Restores project dependencies
      - name: Restore dependencies
        run: dotnet restore ./BackendShiftURL/BackendShiftURL/BackendShiftURL.csproj

      # Lint - Code formatting check
      - name: Lint (dotnet format)
        run: dotnet format ./BackendShiftURL/BackendShiftURL/BackendShiftURL.csproj  --verify-no-changes

      # Initialize CodeQL 
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: csharp

      # Builds the project in release mode
      - name: Build
        run: dotnet build ./BackendShiftURL/BackendShiftURL/BackendShiftURL.csproj --no-restore --configuration Release

      # CodeQL Analysis
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      # Publish: Compiles and packages the application into ./publish folder
      - name: Publish app
        run: dotnet publish ./BackendShiftURL/BackendShiftURL/BackendShiftURL.csproj  -c Release -o ./publish --no-restore

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login (only push the image if it is pushed to main)
      - name: Login to Docker Hub
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build and push Docker image (only push if it is main)
      - name: Build and push Docker image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./BackendShiftURL/BackendShiftURL/DockerfileBackend
          push: true
          tags: |
            itsleonardo/backend:latest
            itsleonardo/backend:staging
            itsleonardo/backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build Docker image locally para teste (for all branches)
      - name: Build Docker image for testing
        if: github.event_name != 'push' || github.ref != 'refs/heads/main'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./BackendShiftURL/BackendShiftURL/DockerfileBackend
          push: false
          tags: itsleonardo/backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Test Docker image locally
      - name: Test Docker image
        run: |
          # Define qual tag usar baseado na branch
          if [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref }}" == "refs/heads/main" ]; then
            IMAGE_TAG="itsleonardo/backend:latest"
          else
            IMAGE_TAG="itsleonardo/backend:test"
          fi
          
          # Run the container in detached mode
          docker run -d --name test-app -p 5000:8080 \
            -e ASPNETCORE_ENVIRONMENT=Staging \
            $IMAGE_TAG
          
          # Wait for container to start
          sleep 15
          
          # Test if container is running and responsive
          for i in {1..10}; do
            if curl -f -s http://localhost:5000/health > /dev/null 2>&1; then
              echo "Docker container health check passed"
              break
            elif curl -f -s http://localhost:5000 > /dev/null 2>&1; then
              echo "Docker container basic connectivity passed"
              break
            fi
            
            if [ $i -eq 10 ]; then
              echo "Docker container test failed"
              docker logs test-app
              exit 1
            fi
            
            echo "Attempt $i failed, retrying..."
            sleep 2
          done
          
          # Cleanup
          docker stop test-app
          docker rm test-app

      # Output image information (just pushed)
      - name: Image info
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "Docker image built and pushed:"
          echo "- itsleonardo/backend:latest"
          echo "- itsleonardo/backend:staging" 
          echo "- itsleonardo/backend:${{ github.sha }}"