# Workflow name shown in GitHub Actions
name: CD - Backend Staging

# Trigger the workflow when CI completes successfully
on:
  workflow_dispatch: # manual trigger
  workflow_run:
    workflows: ["CI - Backend ASP.NET Core"]
    types: [completed]
    branches: [main]

jobs:
  cd-backend:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch'

    permissions:
      contents: read
      packages: read

    steps:
      # Checkout code (needed for docker-compose.yml)
      - name: Checkout code
        uses: actions/checkout@v4

      # Login to DockerHub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Get the commit SHA from the triggering workflow
      - name: Get commit SHA
        id: commit
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "sha=${{ github.sha }}" >> $GITHUB_OUTPUT
          else
            echo "sha=${{ github.event.workflow_run.head_sha }}" >> $GITHUB_OUTPUT
          fi

      # Pull the Docker image built in CI
      - name: Pull Docker image
        run: |
          echo "Pulling Docker image for commit: ${{ steps.commit.outputs.sha }}"
          docker pull itsleonardo/backend:${{ steps.commit.outputs.sha }}
          
          # Tag for local use
          docker tag itsleonardo/backend:${{ steps.commit.outputs.sha }} backend-staging:local

      # Create staging docker-compose file
      - name: Create staging docker-compose file
        run: |
          cat << EOF > docker-compose.staging.yml
          version: '3.8'
          services:
            backend:
              image: backend-staging:local
              environment:
                - ASPNETCORE_ENVIRONMENT=Staging
                - ASPNETCORE_URLS=http://+:8080
              ports:
                - "5000:8080"
              healthcheck:
                test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 40s
          EOF

      # Deploy using Docker Compose
      - name: Deploy with Docker Compose
        env:
          ASPNETCORE_ENVIRONMENT: Staging
        run: |
          echo "Starting application with Docker Compose..."
          
          # Start the application using docker compose (v2)
          docker compose -f docker-compose.staging.yml up -d
          
          # Wait for service to be ready
          echo "Waiting for application to start..."
          sleep 20
      
      # Health Check
      - name: Health Check
        run: |
          echo "Performing comprehensive health check..."
          
          # Check if container is running
          if ! docker compose -f docker-compose.staging.yml ps | grep -q "Up"; then
            echo "Container is not running!"
            docker compose -f docker-compose.staging.yml logs
            exit 1
          fi
          
          # Perform HTTP health checks
          for i in {1..30}; do
            if curl -f -s http://localhost:5000/health > /dev/null 2>&1; then
              echo "Health check passed (attempt $i)"
              echo "Application is healthy and ready!"
              break
            elif curl -f -s http://localhost:5000 > /dev/null 2>&1; then
              echo "Basic connectivity check passed (attempt $i)"
              break
            fi
            
            if [ $i -eq 30 ]; then
              echo "Health check failed after 30 attempts"
              echo "Container logs:"
              docker compose -f docker-compose.staging.yml logs
              exit 1
            fi
            
            echo "Health check attempt $i failed, retrying in 2 seconds..."
            sleep 2
          done

      # Smoke tests
      - name: Smoke tests (placeholder)
        run: |
          echo "Running basic smoke tests..."
          
          # Test basic endpoints
          echo "Testing root endpoint..."
          curl -f -s http://localhost:5000 || echo "Root endpoint not available"
          
          echo "Testing health endpoint..."
          curl -f -s http://localhost:5000/health || echo "Health endpoint not available"
          
          echo "Smoke tests completed"

      # Container Resource Usage
      - name: Check Resource Usage
        run: |
          echo "Checking container resource usage..."
          docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.BlockIO}}"

      # Cleanup - Stop application
      - name: Cleanup - Stop application
        if: always()
        run: |
          echo "Stopping application..."
          
          # Stop and remove containers using docker compose (v2)
          docker compose -f docker-compose.staging.yml down -v || true
          
          # Remove the local staging image
          docker rmi backend-staging:local || true
          
          # Clean up staging override file
          rm -f docker-compose.staging.yml || true
          
          echo "Cleanup completed"

      # Legacy fallback (simplified)
      - name: Legacy Deployment Fallback
        if: failure()
        run: |
          echo "Attempting legacy deployment fallback..."
          
          # Try to use the staging image directly
          docker pull itsleonardo/backend:staging || exit 1
          
          # Run container directly
          docker run -d --name fallback-app -p 5000:8080 \
            -e ASPNETCORE_ENVIRONMENT=Staging \
            -e ASPNETCORE_URLS=http://+:8080 \
            itsleonardo/backend:staging
          
          # Wait and test
          sleep 15
          curl -f http://localhost:5000/health || curl -f http://localhost:5000 || exit 1
          
          echo "âœ… Legacy deployment successful"
          
          # Cleanup fallback
          docker stop fallback-app || true
          docker rm fallback-app || true

      # Deployment Success
      - name: Deployment Success
        if: success()
        run: |
          echo "ðŸŽ‰ Staging deployment completed successfully!"
          echo "Application is running with commit: ${{ steps.commit.outputs.sha }}"
          echo "Docker image: itsleonardo/backend:${{ steps.commit.outputs.sha }}"
          echo "Ready for production deployment"